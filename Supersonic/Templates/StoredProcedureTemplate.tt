<#@ template language="C#" debug="true" visibility="internal" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="Supersonic" #> 
public <#=_storedProcedure.CodeReturnType#> <#=_storedProcedure.CodeName#>(<#=_storedProcedure.GetParameterMethodSignature()#>)
{
	using(var connection = new SqlConnection(this._connectionString))
	{
		var command = new SqlCommand("<#=_storedProcedure.SqlName#>", connection);
		command.CommandType = CommandType.StoredProcedure;
		connection.Open();

		// Parameters
<#	foreach(var parameter in _storedProcedure.Parameters) { #>
		var <#=parameter.CodeName#>Param = new SqlParameter("<#=parameter.SqlName#>", <#=parameter.SqlDbTypeString#>, <#=parameter.MaxLength#>);
		<#=parameter.CodeName#>Param.Direction = <#=parameter.IsOutput ? "ParameterDirection.InputOutput" : "ParameterDirection.Input"#>;
		<#=parameter.CodeName#>Param.Value = <#=parameter.CodeName#>;
		command.Parameters.Add(<#=parameter.CodeName#>Param);
<#	} #>
		<#=_storedProcedure.GetReturnValueCode()#>
// Assign the output parameter values back to the ref instances
<#	foreach(var parameter in _storedProcedure.Parameters.Where(x => x.IsOutput)) { #>
		<#=parameter.CodeName#> = (<#=parameter.CodeType#>)<#=parameter.CodeName#>Param.Value;
<#	} #>
		// Return the result
		return __returnValue;
	}
}
